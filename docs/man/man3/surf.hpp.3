.TH "include/surf.hpp" 3 "Tue Jul 7 2020" "copyMoveCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/surf.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include <algorithm>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <ctime>\fP
.br
\fC#include <opencv2/opencv\&.hpp>\fP
.br
\fC#include <opencv2/features2d\&.hpp>\fP
.br
\fC#include <opencv2/xfeatures2d/nonfree\&.hpp>\fP
.br
\fC#include 'line\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "cv::Mat \fBsurf_analysis\fP (const cv::Mat &src, int minHessian=400)"
.br
.ti -1c
.RI "cv::Mat \fBsurf_matching\fP (const cv::Mat &img1, const cv::Mat &img2, int minHessian=400)"
.br
.ti -1c
.RI "cv::Mat \fBsurf_improved\fP (const cv::Mat &img, int minHessian=400)"
.br
.ti -1c
.RI "bool \fBareNotNear\fP (const cv::Point2f &point1, const cv::Point2f &point2)"
.br
.ti -1c
.RI "cv::Mat \fBparallelLines\fP (const cv::Mat &img)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This file defines some functions that will be used to apply the SURF algorithm on images\&. 
.PP
Definition in file \fBsurf\&.hpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "bool areNotNear (const cv::Point2f & point1, const cv::Point2f & point2)"
Helper function used in surf_matching algorithm: it checks whether two points are near to each other\&. In this function, p1 is near to p2 if p1 is one of the eight neighbours of p2 or is equal to p2 :
.PP
+---+----+---+ | a | b | c | +---+----+---+ | d | p2 | e | p1 is near to p2 <==> p1 == p2 or p1 in [a, h] +---+----+---+ | f | g | h | +---+----+---+
.PP
Note: this relation is symmetric\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint1\fP The first point\&. 
.br
\fIpoint2\fP The second point\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if point1 is not near to point2, false otherwise\&. 
.RE
.PP

.SS "cv::Mat parallelLines (const cv::Mat & img)"

.SS "cv::Mat surf_analysis (const cv::Mat & src, int minHessian = \fC400\fP)"
This function only detects SURF keypoints and draws them on the source image\&.
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP The source image\&. 
.br
\fIminHessian\fP The value of the Hessian threshold in the SURF algorithm\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A matrix representing the source image with the SURF keypoints drawn on it\&. 
.RE
.PP

.SS "cv::Mat surf_improved (const cv::Mat & img, int minHessian = \fC400\fP)"
This function implements the algorithm presented in the paper: 'A SIFT-Based Forensic Method for Copyâ€“Move Attack Detection 
 and Transformation Recovery'\&. It detects SURF keypoints using the regular SURF algorithm, but the matching process is customized in order to fit our needs : it is done on only one image instead of two\&.
.PP
\fBParameters:\fP
.RS 4
\fIimg\fP The source image\&. 
.br
\fIminHessian\fP The value of the Hessian threshold in the SURF algorithm\&.
.br
\fIA\fP matrix representing the source image, with matches between similar areas drawn\&. 
.RE
.PP

.SS "cv::Mat surf_matching (const cv::Mat & img1, const cv::Mat & img2, int minHessian = \fC400\fP)"
This function detects SURF keypoints on two images, and then computes the matching keypoints between both images\&.
.PP
Note: This function should be used when img2 is part of img1\&.
.PP
\fBParameters:\fP
.RS 4
\fIimg1\fP The source image\&. 
.br
\fIimg2\fP An image usually extracted from img1\&. It can be applied transformations such as rotations, scaling\&.\&.\&. 
.br
\fIminHessian\fP The value of the Hessian threshold in the SURF algorithm\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A matrix representing the two images side by side, with matches between the keypoints drawn\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for copyMoveCheck from the source code\&.
