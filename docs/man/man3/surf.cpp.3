.TH "src/surf.cpp" 3 "Tue Jul 7 2020" "copyMoveCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/surf.cpp
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./include/surf\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "Mat \fBsurf_analysis\fP (const Mat &src, int minHessian)"
.br
.ti -1c
.RI "map< double, int > \fBsimilarityVector\fP (const vector< KeyPoint > &keypoints, const Mat &descriptors, int i)"
.br
.ti -1c
.RI "int \fBrandRange\fP (int a, int b)"
.br
.ti -1c
.RI "Mat \fBtransformAndDraw\fP (const Mat &img, vector< Line > lines, bool print=false)"
.br
.ti -1c
.RI "Mat \fBparallelLines\fP (const Mat &img)"
.br
.ti -1c
.RI "Mat \fBsurf_improved\fP (const Mat &img, int minHessian)"
.br
.ti -1c
.RI "Mat \fBsurf_matching\fP (const Mat &img1, const Mat &img2, int minHessian)"
.br
.ti -1c
.RI "bool \fBareNotNear\fP (const Point2f &point1, const Point2f &point2)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This file implements the fucntions defined in \fBsurf\&.hpp\fP 
.PP
Definition in file \fBsurf\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "bool areNotNear (const Point2f & point1, const Point2f & point2)"
Helper function used in surf_matching algorithm: it checks whether two points are near to each other\&. In this function, p1 is near to p2 if p1 is one of the eight neighbours of p2 or is equal to p2 :
.PP
.PP
.nf
+-----+-----+-----+
|  a  |  b  |  c  |
+-----+-----+-----+
|  d  | p_2 |  e  |  p1 is near to p2 <==> p1 == p2 or p1 in [a, h]
+-----+-----+-----+
|  f  |  g  |  h  |
+-----+-----+-----+
.fi
.PP
.PP
Note: this relation is symmetric\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint1\fP The first point\&. 
.br
\fIpoint2\fP The second point\&.
.RE
.PP
\fBReturns:\fP
.RS 4
True if point1 is not near to point2, false otherwise\&. 
.RE
.PP

.PP
Definition at line 304 of file surf\&.cpp\&.
.SS "Mat parallelLines (const Mat & img)"

.PP
Definition at line 110 of file surf\&.cpp\&.
.SS "int randRange (int a, int b)"

.PP
Definition at line 85 of file surf\&.cpp\&.
.SS "map<double, int> similarityVector (const vector< KeyPoint > & keypoints, const Mat & descriptors, int i)"
Helper function that computes a similarity vector for a keypoint\&. Given $X = \{x_1, ..., x_n\}$ a set of keypoints and $F = \{f_1, ..., f_n\}$ their respective descriptors, and given an index $i \in [1, n]$, this function computes the following vector: $D = \{d_1, ..., d_{n-1}\}$ such as :
.IP "\(bu" 2
$\forall j \in [1, n]\setminus\lbrace i\rbrace,\; d_j = ||f_i - f_j||_2$
.IP "\(bu" 2
the coordinates of $D$ are sorted by ascending order
.PP
.PP
The code actually returns a map because as we need to sort the distances, we need to keep the correspondance between a computed distance and the matching descriptor\&. Thus, we return a map associating distances with the matching keypoint's index\&.
.PP
\fBParameters:\fP
.RS 4
\fIkeypoints\fP The list of keypoints\&. 
.br
\fIdescriptors\fP A matrix whose dimensions are len(keypoints) x 64 or len(keypoints) x 128\&. The i-th line of the matrix is the descriptor of the i-th keypoint in keypoints\&. 
.br
\fIi\fP The index of the keypoint we want to compute a similarity vector for\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A map associating the euclidean distance between the i-th keypoint and all the other keypoints and the index of the other keypoint\&. 
.RE
.PP

.PP
Definition at line 56 of file surf\&.cpp\&.
.SS "Mat surf_analysis (const Mat & src, int minHessian)"
This function only detects SURF keypoints and draws them on the source image\&.
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP The source image\&. 
.br
\fIminHessian\fP The value of the Hessian threshold in the SURF algorithm\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A matrix representing the source image with the SURF keypoints drawn on it\&. 
.RE
.PP

.PP
Definition at line 23 of file surf\&.cpp\&.
.SS "Mat surf_improved (const Mat & img, int minHessian)"
This function implements the algorithm presented in the paper: 'A SIFT-Based Forensic Method for Copyâ€“Move Attack Detection 
 and Transformation Recovery'\&. It detects SURF keypoints using the regular SURF algorithm, but the matching process is customized in order to fit our needs : it is done on only one image instead of two\&.
.PP
\fBParameters:\fP
.RS 4
\fIimg\fP The source image\&. 
.br
\fIminHessian\fP The value of the Hessian threshold in the SURF algorithm\&.
.br
\fIA\fP matrix representing the source image, with matches between similar areas drawn\&. 
.RE
.PP

.PP
Definition at line 154 of file surf\&.cpp\&.
.SS "Mat surf_matching (const Mat & img1, const Mat & img2, int minHessian)"
This function detects SURF keypoints on two images, and then computes the matching keypoints between both images\&.
.PP
Note: This function should be used when img2 is part of img1\&.
.PP
\fBParameters:\fP
.RS 4
\fIimg1\fP The source image\&. 
.br
\fIimg2\fP An image usually extracted from img1\&. It can be applied transformations such as rotations, scaling\&.\&.\&. 
.br
\fIminHessian\fP The value of the Hessian threshold in the SURF algorithm\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A matrix representing the two images side by side, with matches between the keypoints drawn\&. 
.RE
.PP

.PP
Definition at line 237 of file surf\&.cpp\&.
.SS "Mat transformAndDraw (const Mat & img, vector< Line > lines, bool print = \fCfalse\fP)"

.PP
Definition at line 90 of file surf\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for copyMoveCheck from the source code\&.
